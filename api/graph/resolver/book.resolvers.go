package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"
	"go-fiber/api/graph/model"
	"go-fiber/domain/entities"
)

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.BookInput) (*model.Book, error) {
	book := &entities.Book{
		Title:    input.Title,
		AuthorID: uint(input.AuthorID),
	}

	err := r.Resolver.bookSvc.CreateBook(book)
	if err != nil {
		return nil, err
	}

	return &model.Book{
		ID:       int32(book.ID),
		Title:    book.Title,
		AuthorID: int32(book.AuthorID),
	}, nil
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, id int32, input model.BookInput) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: UpdateBook - updateBook"))
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id int32) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBook - deleteBook"))
}

// GetAllBook is the resolver for the getAllBook field.
func (r *queryResolver) GetAllBook(ctx context.Context) ([]*model.Book, error) {
	books, err := r.Resolver.bookSvc.GetAllBooks()
	if err != nil {
		return nil, err
	}

	var bookModels []*model.Book
	for _, book := range books {
		bookModels = append(bookModels, &model.Book{
			ID:       int32(book.ID),
			Title:    book.Title,
			AuthorID: int32(book.AuthorID),
		})
	}

	return bookModels, nil
}

// GetBook is the resolver for the getBook field.
func (r *queryResolver) GetBook(ctx context.Context, id int32) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: GetBook - getBook"))
}

// BooksByAuthor is the resolver for the booksByAuthor field.
func (r *queryResolver) BooksByAuthor(ctx context.Context, authorID string) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: BooksByAuthor - booksByAuthor"))
}
