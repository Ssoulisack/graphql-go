package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"
	generated "go-fiber/api/graph/generated"
	"go-fiber/api/graph/model"
	"go-fiber/domain/entities"
)

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input model.AuthorInput) (*model.Author, error) {
	author := &entities.Author{
		Name: input.Name,
	}

	err := r.Resolver.authorSvc.CreateAuthor(author)
	if err != nil {
		return nil, err
	}

	return &model.Author{
		ID:   int32(author.ID),
		Name: author.Name,
	}, nil
}

// UpdateAuthor is the resolver for the updateAuthor field.
func (r *mutationResolver) UpdateAuthor(ctx context.Context, id int32, input model.AuthorInput) (*model.Author, error) {
	panic(fmt.Errorf("not implemented: UpdateAuthor - updateAuthor"))
}

// DeleteAuthor is the resolver for the deleteAuthor field.
func (r *mutationResolver) DeleteAuthor(ctx context.Context, id int32) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAuthor - deleteAuthor"))
}

// GetAllAuthors is the resolver for the getAllAuthors field.
func (r *queryResolver) GetAllAuthors(ctx context.Context) ([]*model.Author, error) {
	authors, err := r.Resolver.authorSvc.GetAllAuthors()
	if err != nil {
		return nil, err
	}

	var authorModels []*model.Author
	for _, author := range authors {
		authorModels = append(authorModels, &model.Author{
			ID:   int32(author.ID),
			Name: author.Name,
		})
	}

	return authorModels, nil
}

// GetAuthor is the resolver for the getAuthor field.
func (r *queryResolver) GetAuthor(ctx context.Context, id int32) (*model.Author, error) {
	panic(fmt.Errorf("not implemented: GetAuthor - getAuthor"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }
